plugins {
    id 'org.springframework.boot' version '2.7.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.flywaydb.flyway" version "8.1.0"
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'com.avast.gradle.docker-compose' version "0.14.9"
}

group = 'com.simleetag'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenLocal()
    mavenCentral()
}

ext {
    queryDslVersion = "5.0.0"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Jackson
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'

    //OAuth
    implementation 'com.auth0:java-jwt:4.0.0'

    //Bouncy Castle Provider
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:31.1-jre'

    // QueryDSL
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"
    annotationProcessor(
            "javax.persistence:javax.persistence-api",
            "javax.annotation:javax.annotation-api",
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    // log
    implementation 'com.github.maricn:logback-slack-appender:1.6.1'

    // webClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.11'

    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.80.Final:osx-aarch_64'
}

test {
    testLogging {
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }

    useJUnitPlatform()
}

tasks.register('testCoverage', Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(test, jacocoTestReport, jacocoTestCoverageVerification)
    jacocoTestReport.mustRunAfter(test)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

check {
    dependsOn(testCoverage)
}

jar {
    enabled = false
}

sourceSets {
    main.java.srcDirs += ["$projectDir/build/generated"]
}

tasks.withType(JavaCompile).configureEach {
    options.annotationProcessorGeneratedSourcesDirectory = file("$projectDir/build/generated")
}

jacoco {
    toolVersion = '0.8.7'
}

sonarqube {
    properties {
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/exception/**, **/dto/**"

        property "sonar.tests", "src/test/java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                            excludes: [
                                    'com/simleetag/homework/*Application.class',
                                    'com/simleetag/homework/dto/**',
                                    'com/simleetag/homework/exception/**',
                            ]
                    )
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            excludes = [
                    'com.simleetag.homework.*Application',
                    'com.simleetag.homework.dto.*',
                    'com.simleetag.homework.exception.*',
            ]
        }
    }
}
