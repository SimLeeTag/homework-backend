plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'java'
    id "org.flywaydb.flyway" version "8.1.0"
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
}

group = 'com.simleetag'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    jsondoclet
}

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    mavenCentral()
}

ext {
    snippetsDir = file("$buildDir/generated-snippets")
    javadocJsonDir = file("$buildDir/generated-javadoc-json")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    //OAuth
    implementation 'com.auth0:java-jwt:3.18.1'

    //Bouncy Castle Provider
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.google.guava:guava:31.0.1-jre'

    // QueryDSL
    implementation 'com.querydsl:querydsl-core'
    implementation 'com.querydsl:querydsl-jpa'
    annotationProcessor "com.querydsl:querydsl-apt"

    // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'

    // webClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

    // Spring Auto REST Docs
    testImplementation 'capital.scalable:spring-auto-restdocs-core:2.0.12-SNAPSHOT'
    jsondoclet 'capital.scalable:spring-auto-restdocs-json-doclet-jdk9:2.0.12-SNAPSHOT'
}

task jsonDoclet(type: Javadoc, dependsOn: compileTestJava) {
    source = sourceSets.main.allJava
    classpath = sourceSets.main.compileClasspath
    destinationDir = javadocJsonDir
    options.docletpath = configurations.jsondoclet.files.asType(List)
    options.doclet = 'capital.scalable.restdocs.jsondoclet.ExtractDocumentationAsJsonDoclet'
    options.memberLevel = JavadocMemberLevel.PACKAGE
}

test {
    testLogging {
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }

    systemProperty 'org.springframework.restdocs.outputDir', snippetsDir
    systemProperty 'org.springframework.restdocs.javadocJsonDir', javadocJsonDir

    useJUnitPlatform()

    outputs.dir snippetsDir
}

asciidoctor {
    inputs.dir snippetsDir

    doFirst {
        delete file('src/main/resources/static/docs')
    }
}

task copyDocument(type: Copy) {
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task restDocs {
    group 'documentation'

    dependsOn(jsonDoclet, test, asciidoctor, copyDocument)
    test.mustRunAfter(jsonDoclet)
    asciidoctor.mustRunAfter(test)
    copyDocument.mustRunAfter(asciidoctor)
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(test, jacocoTestReport, jacocoTestCoverageVerification)
    jacocoTestReport.mustRunAfter(test)
    jacocoTestCoverageVerification.mustRunAfter(jacocoTestReport)
}

check {
    dependsOn(testCoverage, restDocs)
    restDocs.mustRunAfter(testCoverage)
}

jar {
    enabled = false
}

jacoco {
    toolVersion = '0.8.7'
}

sonarqube {
    properties {
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.exclusions", "**/exception/**, **/dto/**"

        property "sonar.tests", "src/test/java"
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacocoTestReport {
    reports {
        html.required = false
        xml.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it,
                            excludes: [
                                    'com/simleetag/homework/*Application.class',
                                    'com/simleetag/homework/dto/**',
                                    'com/simleetag/homework/exception/**',
                            ]
                    )
                })
        )
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.50
            }

            excludes = [
                    'com.simleetag.homework.*Application',
                    'com.simleetag.homework.dto.*',
                    'com.simleetag.homework.exception.*',
            ]
        }
    }
}
